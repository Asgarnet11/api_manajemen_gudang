// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================================
// MODEL DEFINITIONS
// ===================================

model User {
  id        String   @id @default(uuid())
  nama      String
  username  String   @unique
  password  String
  role      Role     @default(staff)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  movements ItemMovement[]

  @@map("users")
}

enum Role {
  admin
  staff
}

model Customer {
  id        String    @id @default(uuid())
  nama      String
  alamat    String?
  telepon   String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  items     Item[]
  invoices  Invoice[]

  @@map("customers")
}

model Item {
  id                  String   @id @default(uuid())
  nama_barang         String
  sku                 String?  @unique
  barcode             String?  @unique
  
  jumlah              Int      @default(0)
  
  minimum_stock_level Int      @default(0)
  status              Status   @default(masuk_gudang)
  tanggal_masuk       DateTime @default(now())
  tanggal_keluar      DateTime?
  shipmentId          String?
  shipment            Shipment? @relation(fields: [shipmentId], references: [id])
  customerId          String
  customer            Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  movements           ItemMovement[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("items")
}

model ItemMovement {
  id             String       @id @default(uuid())
  quantityChange Int
  notes          String?
  type           MovementType
  itemId         String
  item           Item         @relation(fields: [itemId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  createdAt      DateTime     @default(now())

  @@map("item_movements")
}

model Shipment {
  id             String         @id @default(uuid())
  trackingNumber String         @unique @default(cuid())
  destination    String
  etd            DateTime
  eta            DateTime
  status         ShipmentStatus @default(LOADING)
  items          Item[]
  invoice        Invoice?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("shipments")
}

model Invoice {
  id            String        @id @default(uuid())
  invoiceNumber String        @unique @default(cuid())
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  totalAmount   Float
  status        InvoiceStatus @default(DRAFT)
  customerId    String
  customer      Customer      @relation(fields: [customerId], references: [id])
  shipmentId    String        @unique
  shipment      Shipment      @relation(fields: [shipmentId], references: [id])
  items         InvoiceItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(uuid())
  description String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  VOID
}

enum Status {
  masuk_gudang
  keluar_gudang
  dalam_kontainer
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
}

enum ShipmentStatus {
  LOADING
  IN_TRANSIT
  ARRIVED
  COMPLETED
}